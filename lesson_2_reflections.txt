What happens when you initialize a repository? Why do you need to do it?
 It will create .git hidden file in the repository which helps to save commits
 made

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The files which need to be commited will be present in the staging area, this is not 
the case with working directory and repository

How can you use the staging area to make sure you have one commit per logical
change?
By checking the difference between working directory and staging area

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
When multiple people are working on the same project to add different features

How do the diagrams help you visualize the branch structure?
It helps in understanding concepts more clearly

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
New features are added to the project, it will help in keeping track of different 
commits done

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
Automatic merge doesn't shows the complexity present behind 


Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
